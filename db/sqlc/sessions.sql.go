// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: sessions.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createSession = `-- name: CreateSession :one
INSERT INTO sessions
(
  id,
  user_id,
  refresh_token,
  user_agent,
  client_ip,
  is_blocked,
  expires_at,
  encrypted_twitch_token
)
VALUES
($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, user_id, refresh_token, user_agent, client_ip, is_blocked, expires_at, created_at, encrypted_twitch_token
`

type CreateSessionParams struct {
	ID                   pgtype.UUID        `json:"id"`
	UserID               int64              `json:"user_id"`
	RefreshToken         string             `json:"refresh_token"`
	UserAgent            string             `json:"user_agent"`
	ClientIp             string             `json:"client_ip"`
	IsBlocked            bool               `json:"is_blocked"`
	ExpiresAt            pgtype.Timestamptz `json:"expires_at"`
	EncryptedTwitchToken string             `json:"encrypted_twitch_token"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRow(ctx, createSession,
		arg.ID,
		arg.UserID,
		arg.RefreshToken,
		arg.UserAgent,
		arg.ClientIp,
		arg.IsBlocked,
		arg.ExpiresAt,
		arg.EncryptedTwitchToken,
	)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RefreshToken,
		&i.UserAgent,
		&i.ClientIp,
		&i.IsBlocked,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.EncryptedTwitchToken,
	)
	return i, err
}

const getSession = `-- name: GetSession :one
SELECT id, user_id, refresh_token, user_agent, client_ip, is_blocked, expires_at, created_at, encrypted_twitch_token FROM sessions
WHERE id = $1 AND user_id = $2
LIMIT 1
`

type GetSessionParams struct {
	ID     pgtype.UUID `json:"id"`
	UserID int64       `json:"user_id"`
}

func (q *Queries) GetSession(ctx context.Context, arg GetSessionParams) (Session, error) {
	row := q.db.QueryRow(ctx, getSession, arg.ID, arg.UserID)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RefreshToken,
		&i.UserAgent,
		&i.ClientIp,
		&i.IsBlocked,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.EncryptedTwitchToken,
	)
	return i, err
}

const listSession = `-- name: ListSession :many
SELECT id, user_id, refresh_token, user_agent, client_ip, is_blocked, expires_at, created_at, encrypted_twitch_token FROM sessions
ORDER BY created_at ASC
`

func (q *Queries) ListSession(ctx context.Context) ([]Session, error) {
	rows, err := q.db.Query(ctx, listSession)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Session{}
	for rows.Next() {
		var i Session
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.RefreshToken,
			&i.UserAgent,
			&i.ClientIp,
			&i.IsBlocked,
			&i.ExpiresAt,
			&i.CreatedAt,
			&i.EncryptedTwitchToken,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSession = `-- name: UpdateSession :exec
UPDATE sessions
SET
  encrypted_twitch_token = $2
WHERE id = $1
RETURNING id, user_id, refresh_token, user_agent, client_ip, is_blocked, expires_at, created_at, encrypted_twitch_token
`

type UpdateSessionParams struct {
	ID                   pgtype.UUID `json:"id"`
	EncryptedTwitchToken string      `json:"encrypted_twitch_token"`
}

func (q *Queries) UpdateSession(ctx context.Context, arg UpdateSessionParams) error {
	_, err := q.db.Exec(ctx, updateSession, arg.ID, arg.EncryptedTwitchToken)
	return err
}
