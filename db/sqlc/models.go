// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type ConfigTypes string

const (
	ConfigTypesAutoShoutoutActivation ConfigTypes = "auto_shoutout_activation"
	ConfigTypesAutoShoutoutDelay      ConfigTypes = "auto_shoutout_delay"
	ConfigTypesBlacklist              ConfigTypes = "blacklist"
	ConfigTypesTimerCardSoActivation  ConfigTypes = "timer_card_so_activation"
	ConfigTypesTimerCardDuration      ConfigTypes = "timer_card_duration"
)

func (e *ConfigTypes) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ConfigTypes(s)
	case string:
		*e = ConfigTypes(s)
	default:
		return fmt.Errorf("unsupported scan type for ConfigTypes: %T", src)
	}
	return nil
}

type NullConfigTypes struct {
	ConfigTypes ConfigTypes `json:"config_types"`
	Valid       bool        `json:"valid"` // Valid is true if ConfigTypes is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullConfigTypes) Scan(value interface{}) error {
	if value == nil {
		ns.ConfigTypes, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ConfigTypes.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullConfigTypes) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ConfigTypes), nil
}

type AttendanceMember struct {
	ID        int64              `json:"id"`
	StreamID  int64              `json:"stream_id"`
	Username  string             `json:"username"`
	IsShouted bool               `json:"is_shouted"`
	PresentAt pgtype.Timestamptz `json:"present_at"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

type Session struct {
	ID                   pgtype.UUID        `json:"id"`
	UserID               int64              `json:"user_id"`
	RefreshToken         string             `json:"refresh_token"`
	UserAgent            string             `json:"user_agent"`
	ClientIp             string             `json:"client_ip"`
	IsBlocked            bool               `json:"is_blocked"`
	ExpiresAt            pgtype.Timestamptz `json:"expires_at"`
	CreatedAt            pgtype.Timestamptz `json:"created_at"`
	EncryptedTwitchToken string             `json:"encrypted_twitch_token"`
	UpdatedAt            pgtype.Timestamptz `json:"updated_at"`
}

type Stream struct {
	ID int64 `json:"id"`
	// id punya user
	UserID    int64              `json:"user_id"`
	Title     string             `json:"title"`
	GameName  string             `json:"game_name"`
	StartedAt pgtype.Timestamptz `json:"started_at"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	CreatedBy int64              `json:"created_by"`
}

type User struct {
	ID int64 `json:"id"`
	// user_id punya twitch
	UserID          string             `json:"user_id"`
	UserLogin       string             `json:"user_login"`
	UserName        string             `json:"user_name"`
	ProfileImageUrl string             `json:"profile_image_url"`
	CreatedAt       pgtype.Timestamptz `json:"created_at"`
	UpdatedAt       pgtype.Timestamptz `json:"updated_at"`
}

type UserConfig struct {
	ID int64 `json:"id"`
	// id punya user
	UserID     int64              `json:"user_id"`
	ConfigType ConfigTypes        `json:"config_type"`
	Value      string             `json:"value"`
	CreatedAt  pgtype.Timestamptz `json:"created_at"`
	UpdatedAt  pgtype.Timestamptz `json:"updated_at"`
}
