// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: attendances.sql

package db

import (
	"context"
)

const createAttendance = `-- name: CreateAttendance :one
INSERT INTO attendances
(
  user_id,
  stream_id
)
VALUES
($1, $2)
RETURNING id, user_id, stream_id, created_at
`

type CreateAttendanceParams struct {
	UserID   int64 `json:"user_id"`
	StreamID int64 `json:"stream_id"`
}

func (q *Queries) CreateAttendance(ctx context.Context, arg CreateAttendanceParams) (Attendance, error) {
	row := q.db.QueryRow(ctx, createAttendance, arg.UserID, arg.StreamID)
	var i Attendance
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.StreamID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAttendance = `-- name: DeleteAttendance :exec
DELETE FROM attendances
WHERE id = $1
`

func (q *Queries) DeleteAttendance(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteAttendance, id)
	return err
}

const getAttendance = `-- name: GetAttendance :one
SELECT id, user_id, stream_id, created_at FROM attendances
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAttendance(ctx context.Context, id int64) (Attendance, error) {
	row := q.db.QueryRow(ctx, getAttendance, id)
	var i Attendance
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.StreamID,
		&i.CreatedAt,
	)
	return i, err
}

const listAttendances = `-- name: ListAttendances :many
SELECT id, user_id, stream_id, created_at FROM attendances
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListAttendancesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListAttendances(ctx context.Context, arg ListAttendancesParams) ([]Attendance, error) {
	rows, err := q.db.Query(ctx, listAttendances, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Attendance{}
	for rows.Next() {
		var i Attendance
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.StreamID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
